package Lesson_15.Work1;
//Принцип подстановки Барбары Лисков
// (Liskov Substitution Principle):

/*
1.Принцип единственной ответственности (Single Responsibility Principle):
В данном коде классы Rectangle и Square представляют различные фигуры и выполняют только функции,
 связанные с вычислением площади этих фигур.
2.Принцип открытости/закрытости (Open/Closed Principle):
В данном коде классы Rectangle и Square являются закрытыми для изменений,
но открытыми для расширения. Если вы захотите добавить новую фигуру, вы можете создать новый класс,
реализующий интерфейс Figure, без изменения существующего кода.
3.Принцип подстановки Барбары Лисков (Liskov Substitution Principle):
Классы Rectangle и Square правильно реализуют интерфейс Figure, не нарушая его контракт.
Это означает, что вы можете использовать объекты Rectangle и Square везде,
где ожидается объект типа Figure, и программа будет работать корректно.
4.Принцип разделения интерфейса (Interface Segregation Principle):
Интерфейс Figure хорошо разделен, и методы setHeight() и setWidth() разделены в два отдельных метода,
 что соответствует принципу разделения интерфейса.
5.Принцип инверсии зависимостей (Dependency Inversion Principle):
В данном коде нет явных зависимостей от конкретных реализаций. Классы Rectangle и Square зависят только от абстракции,
 представленной интерфейсом Figure, что соответствует принципу инверсии зависимостей.

 Однако, хотя код соответствует принципам SOLID, требуется доработка:
*/

public interface Figure {
 void setHeight(int height);
 void setWidth(int height);
 int areaCalc();
}
