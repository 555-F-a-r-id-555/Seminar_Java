package lesson04;


//Код, который вы предоставили, представляет собой обобщенный метод max, который принимает массив элементов типа T, ограниченных интерфейсом Comparable<T>. Метод ищет и возвращает максимальный элемент из массива.
//
//Вот объяснение, как работает этот метод:
//
//Создается переменная max, и начальное значение присваивается первому элементу массива arr[0].
//В цикле for-each перебираются все элементы массива arr.
//Для каждого элемента elem сравнивается с текущим максимальным элементом max, используя метод compareTo из интерфейса Comparable.
//Если elem больше max (результат compareTo больше 0), то max обновляется и присваивается значение elem.
//По окончании цикла возвращается найденный максимальный элемент max.
//Пример использования метода max для поиска максимального элемента из массива целых чисел:


//Совершенно очевидно, что определенные нами ранее методы max ( )   не могут быть
//использованы в данном случае, но логический принцип остается тем же самым. На
//этот раз имплементация должна опираться на Comparable или Comparator.
// Имплементация на основе comparaЫe может быть следующей:

//стр 227 книга Java решение практических задач
// 2 код сверху


public class Main01 {
    public static void main(String[] args) {
        Integer[] numbers = {5, 2, 9, 1, 7};
        Integer maxNumber = max(numbers);
        System.out.println("Максимальное число: " + maxNumber);
    }

    public static <T extends Comparable<T>> T max(T[] arr) {
        T max = arr[0];

        for (T elem : arr) {
            if (elem.compareTo(max) > 0) {
                max = elem;
            }
        }
        return max;
    }


//    Comparable<T> является обобщенным интерфейсом (generics).
//    В объявлении public static <T extends Comparable<T>> T max(T[] arr), <T extends Comparable<T>> указывает,
//    что тип T должен быть сравнимым (Comparable<T>) с самим собой.
//
//    Обобщенные типы (generics) позволяют создавать параметризованные классы и методы,
//    которые могут работать с различными типами данных.
//    В данном случае, <T> является параметром типа, который определяется при вызове метода max,
//    и ограничен интерфейсом Comparable<T>.
//    Это означает, что тип T должен реализовывать интерфейс Comparable для сравнения объектов этого типа.
//
//    Таким образом, Comparable<T> позволяет указывать,
//    что тип T должен быть сравнимым с помощью метода compareTo().
//    Это обеспечивает использование операций сравнения (например, > или <)
//    в методе max для определения максимального элемента в массиве.
//
//    Использование обобщений позволяет создавать более гибкий и переиспользуемый код,
//    который может работать с различными типами данных, при условии,
//    что эти типы реализуют необходимые интерфейсы или удовлетворяют другим требованиям.
}